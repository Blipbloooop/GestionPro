//- group.pug
extends dashboard.pug 
block content 
  main(class="flex-grow p-6")
    div(class="flex items-center justify-between mb-4")
      h1(class="text-2xl font-semibold text-gray-700 dark:text-white") Mes groupes
      // Bouton "Créer une dépense"
      button(type="button" onclick="openPopup()" class="px-4 py-2 bg-blue-700 text-white rounded-md hover:bg-blue-600") Créer un nouveau groupe
    h2(class="text-lg font-bold text-gray-700 dark:text-white mt-8") Groupes créés :
    if groups.length === 0
      p(class="text-gray-500") Aucun groupe trouvé.
    else
      each group in groups
        div(class="my-2 bg-gray-100 shadow-md rounded px-6 py-4 mb-4")
          h3(class="text-xl font-bold text-gray-800")  #{group.name}
          ul(class="list-disc ml-6")
            each user in group.users
              li(class="text-gray-700 font-medium") #{user.prenom} #{user.nom}
          h4(class="text-lg font-bold text-gray-800 mt-4") Dépenses du groupe :
          if group.expenses.length === 0
            p(class="text-gray-500") Aucune dépense pour ce groupe.
          else
            ul(class="list-disc ml-6")
              each expense in group.expenses
                li(class="text-gray-700 font-medium")
                  | #{expense.description} - #{expense.amount} € (par #{expense.user.nom} #{expense.user.prenom})
          // Section des balances
          h4(class="text-lg font-bold text-gray-800 mt-4") Balances :
          ul(class="list-disc ml-6" id=`balances-${group._id}`)
          
    
    // Popup pour créer un groupe
    div(id="popup" class="hidden fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50 z-50")
      div(class="bg-white p-8 rounded-md shadow-lg w-1/3")
          h2(class="text-xl font-semibold mb-4") Nouveau groupe
          form(action="/dashboard/group" method="post")
            div(class="mb-4")
              label(for="name" class="block text-gray-700") Nom du groupe
                input(type="text" id="name" name="name" class="mt-2 w-full p-2 border border-gray-300 rounded-md" required="")
            // Ajouter des membres
            div(class="mb-4")
              label(for="member-email" class="block text-gray-700") Ajouter des membres :
                div(class="flex mt-2")
                  input(type="email" id="member-email" name="member-email" placeholder="Adresse mail" class="mt-2 w-full p-2 border border-gray-300 rounded-md")
                  button(id="add-member-btn" type="button" class="ml-2 bg-indigo-500 text-white px-4 py-2 rounded-md hover:bg-indigo-600 ") Ajouter 
            // Liste des membres ajoutés
            ul(class="list-disc pl-5 text-gray-700 mt-4" id="member-list")
            input(id="members-input" name="members" type="hidden")
            div(class="flex justify-end")
              button(type="button" onclick="closePopup()" class="px-4 py-2 bg-gray-400 text-white rounded-md mr-2") Annuler
              button(type="submit" class="px-4 py-2 bg-blue-700 text-white rounded-md") Créer le groupe
  // Popup
  script.
    function openPopup() {
      document.getElementById("popup").classList.remove("hidden");
    }
    function closePopup() {
      document.getElementById("popup").classList.add("hidden");
    }
  // Ajouter des membres
  script.
      const addMemberBtn = document.getElementById("add-member-btn");
      const memberEmailInput = document.getElementById("member-email");
      const memberList = document.getElementById("member-list");
      const membersInput = document.getElementById("members-input");
      const members = [];

      addMemberBtn.addEventListener("click", () => {
        const email = memberEmailInput.value.trim();
        if (email && validateEmail(email) && !members.includes(email)) {
          members.push(email);
          membersInput.value = JSON.stringify(members);

          const listItem = document.createElement("li");
          listItem.innerHTML = `
            <span class="mr-2">${email}</span>
            <button type="button" class="text-red-500 text-sm hover:underline" data-email="${email}">Retirer</button>
          `;
          listItem.classList.add("flex", "items-center", "mb-2");
          memberList.appendChild(listItem);

          memberEmailInput.value = "";
        }
      });

      memberList.addEventListener("click", (e) => {
        if (e.target.dataset.email) {
          const email = e.target.dataset.email;
          const index = members.indexOf(email);
          if (index > -1) members.splice(index, 1);
          membersInput.value = JSON.stringify(members);
          e.target.parentElement.remove();
        }
      });

      function validateEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
      }
  // Calculer les dépenses
  script.
    function calculateBalances(expenses, users) {
      const balances = {};

      // Initialisation des balances pour chaque utilisateur
      users.forEach(user => {
        balances[user._id] = 0;
      });

      // Calcul des balances en fonction des dépenses
      expenses.forEach(expense => {
        const share = expense.amount / users.length;

        users.forEach(user => {
          if (user._id === expense.user.toString()) {
            // L'utilisateur qui a payé est crédité
            balances[user._id] += expense.amount - share;
          } else {
            // Les autres utilisateurs sont débités
            balances[user._id] -= share;
          }
        });
      });

      return balances;
    }
  